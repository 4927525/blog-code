<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hzbskak&#39;s Blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on Hzbskak&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Feb 2022 23:43:04 +0800</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Php相关</title>
      <link>/post/mst/php/</link>
      <pubDate>Wed, 23 Feb 2022 23:43:04 +0800</pubDate>
      
      <guid>/post/mst/php/</guid>
      
        <description>列举一些 PHP 中的设计模式？   单例模式：保证在整个应用程序的生命周期中，单例类的实例只存在一个
  工厂模式：定义一个创建对象的接口，让子类去实例化具体类。
  观察者模式 发布/订阅模式：当一个对象状态发生变化时，依赖它的对象全部会收到通知，并自动更新。</description>
      
    </item>
    
    <item>
      <title>Nginx相关</title>
      <link>/post/mst/nginx/</link>
      <pubDate>Wed, 23 Feb 2022 23:42:18 +0800</pubDate>
      
      <guid>/post/mst/nginx/</guid>
      
        <description>为什么要用Nginx？ 因为跨平台，配置简单，支持高并发，耗费内存少。
为什么Nginx性能这么高？ 因为nginx是异步非阻塞事件处理机制：运用了epoll模型，提供了一个队列，排队解决
Nginx怎么处理请求的？ nginx接受一个请求后，首先由listen和server_name 匹配server模块，在匹配的server模块里location，location就是实际地址
什么是正向代理和反向代理？ 正向代理：客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端（访问国外网站）
反向代理：代理服务器来接受请求，然后将请求转发给内网服务器，再将获得的内容返回给客户端。</description>
      
    </item>
    
    <item>
      <title>Redis相关</title>
      <link>/post/mst/redis/</link>
      <pubDate>Wed, 23 Feb 2022 23:41:03 +0800</pubDate>
      
      <guid>/post/mst/redis/</guid>
      
        <description>Redis和Memcached相比，有哪些优势？  redis支持 string list set hash zset，memcached只支持string redis支持数据持久化，可以把内存中的数据持久化到硬盘上，memcached不支持，只能存到内存中，重启就没有数据了。 redis使用的是单线程的多路IO复用机制  为什么用redis？ 因为传统的关系型数据库已经不适用于所用的场景了，比如秒杀时的库存扣减，APP首页的访问流量高峰。很容易把数据库搞崩，所以就需要用到缓存中间件。目前市面上常用的中间件就是redis和mc。</description>
      
    </item>
    
    <item>
      <title>MySQL相关</title>
      <link>/post/mst/sql/</link>
      <pubDate>Wed, 23 Feb 2022 23:04:47 +0800</pubDate>
      
      <guid>/post/mst/sql/</guid>
      
        <description>1. MySQL 索引使用有哪些注意事项呢？ 索引哪些情况下会失效
  查询条件包含or 会导致索引失效
  组合索引中，查询时要按照最左原则进行where条件判断</description>
      
    </item>
    
    <item>
      <title>安装gRPC-Gateway时遇到...descriptor.proto: File not found</title>
      <link>/post/golang/grpc-gateway%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Fri, 14 Jan 2022 10:12:46 +0800</pubDate>
      
      <guid>/post/golang/grpc-gateway%E8%B8%A9%E5%9D%91/</guid>
      
        <description>将 gRPC-Gateway 注释添加到现有的 proto 文件 官方文档： https://grpc-ecosystem.github.io/grpc-gateway/docs/tutorials/adding_annotations/
根据官方文档在安装gRPC的时候，遇到这个错误
D:\go project\go_grpc\pb&amp;gt;protoc --go_out .</description>
      
    </item>
    
    <item>
      <title>基于 WebSocket &#43; MongoDB 的IM即时聊天Demo</title>
      <link>/post/golang/chat/</link>
      <pubDate>Tue, 11 Jan 2022 10:27:37 +0800</pubDate>
      
      <guid>/post/golang/chat/</guid>
      
        <description>序 又过了几天，上个小项目还没来得及消化，就稀里糊涂的过了个周末，昨天收了点尾，现在刚好有时间安排！
写在前面  这个项目是基于WebSocket + MongoDB + MySQL + Redis。</description>
      
    </item>
    
    <item>
      <title>任务清单小项目</title>
      <link>/post/golang/todo-list/</link>
      <pubDate>Fri, 07 Jan 2022 11:40:46 +0800</pubDate>
      
      <guid>/post/golang/todo-list/</guid>
      
        <description>序 最近用gin+gorm写了一个小项目。所以有阵子没更新了。 项目十分简单，主要是以学习开发规范和熟悉代码编写为主，所以没有踩到什么大坑，这里就不多述了
任务清单-后端 此项目使用Gin+Gorm ，基于RESTful API实现的一个任务清单。
项目功能实现   登录鉴权（jwt-go）</description>
      
    </item>
    
    <item>
      <title>docker 集群中 nginx 配置 php 需要注意的地方</title>
      <link>/post/nginx/docker-%E9%9B%86%E7%BE%A4%E4%B8%AD-nginx-%E9%85%8D%E7%BD%AE-php-%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</link>
      <pubDate>Fri, 17 Dec 2021 11:09:08 +0800</pubDate>
      
      <guid>/post/nginx/docker-%E9%9B%86%E7%BE%A4%E4%B8%AD-nginx-%E9%85%8D%E7%BD%AE-php-%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</guid>
      
        <description>序 最近docker部署集群的时候遇到了一个问题。于是就踩坑了&amp;hellip;
问题复现 那就是php和nginx不在同一个容器，却要通过nginx配置的server_name和listen来访问php项目。
之前在本地集成环境部署的时候没有考虑过这个问题，是因为只要nginx的root根目录和php的root根目录指向同一个目录，这样把项目文件放到这个目录下就可同时访问，也就不存在说是php来访问还是nginx来访问的说法。
但是在集群中也就需要考虑这个问题了。
思路 静态文件需要在 nginx 容器内，php代码放在 php-fpm 的容器内，在nginx的配置里 php 部分设置php-fpm 所在容器内php的路径就可以了。</description>
      
    </item>
    
    <item>
      <title>docker swarm 搭建与服务更新</title>
      <link>/post/docker/docker-swarm-%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%9C%8D%E5%8A%A1%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 15 Dec 2021 17:54:53 +0800</pubDate>
      
      <guid>/post/docker/docker-swarm-%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%9C%8D%E5%8A%A1%E6%9B%B4%E6%96%B0/</guid>
      
        <description>序 研究了好久的docker集群部署终于是在本地服务器跑通了。于是趁着热乎赶紧码下来。 1. 创建集群 docker swarm init --advertise-addr 192.168.101.67 将本机ip 作为默认leader节点创建。</description>
      
    </item>
    
    <item>
      <title>tp6 &amp; RabbitMQ企业最佳实践</title>
      <link>/post/mq/tp6-rabbitmq%E4%BC%81%E4%B8%9A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 14 Dec 2021 21:11:37 +0800</pubDate>
      
      <guid>/post/mq/tp6-rabbitmq%E4%BC%81%E4%B8%9A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      
        <description>代码包地址 GITEE
 目录 @TOC
消息队列中间件-前言 消息队列中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋等问题。实现高性能，高可用，可伸缩和最终一致性架构，是大型分布式系统不可缺少的中间件。
RabbitMQ——Rabbit Message Queue的简写，RabbitMQ 是一个由 Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。</description>
      
    </item>
    
    <item>
      <title>后端分层架构开发规范</title>
      <link>/post/blog/%E5%90%8E%E7%AB%AF%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</link>
      <pubDate>Tue, 14 Dec 2021 10:13:29 +0800</pubDate>
      
      <guid>/post/blog/%E5%90%8E%E7%AB%AF%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</guid>
      
        <description>https://github.com/4927525/layer-code/blob/master/layer-code.html</description>
      
    </item>
    
    <item>
      <title>Dockerfile文件docker build制作镜像时,出现pecl not found</title>
      <link>/post/docker/dockerfile%E6%96%87%E4%BB%B6docker-build%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F%E6%97%B6%E5%87%BA%E7%8E%B0pecl-not-found/</link>
      <pubDate>Tue, 14 Dec 2021 09:49:43 +0800</pubDate>
      
      <guid>/post/docker/dockerfile%E6%96%87%E4%BB%B6docker-build%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F%E6%97%B6%E5%87%BA%E7%8E%B0pecl-not-found/</guid>
      
        <description>问题复现： 官方给出的扩展安装地址https://github.com/hyperf/hyperf-docker
RUN apk add --no-cache librdkafka-dev \ &amp;amp;&amp;amp; pecl install rdkafka \ &amp;amp;&amp;amp; echo &amp;#34;extension=rdkafka.</description>
      
    </item>
    
    <item>
      <title>hugo基本操作以及自动化部署</title>
      <link>/post/hugo/hugo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 13 Dec 2021 20:53:28 +0800</pubDate>
      
      <guid>/post/hugo/hugo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</guid>
      
        <description>序 一直以来的博客(有关技术性的)都是放在CSDN上写，从来没有过自己搭建博客的想法。 近期刚好有空，然后就想着说把过往遇到的技术点还有生活的点滴放到个人博客中。 有了这个想法，于是乎就有了下面的过程。
1.Hugo的安装以及基础使用 1.1 安装Hugo 直接去hugo的github仓库下载对应系统的二进制文件：
https://github.com/gohugoio/hugo/releases
然后把二进制文件放在环境变量中，由于之前配置过GOPATH的bin到环境变量中，所有这里我直接把二进制放在bin文件夹下面。</description>
      
    </item>
    
    <item>
      <title>Docker学习笔记</title>
      <link>/post/docker/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 13 Dec 2021 17:12:42 +0800</pubDate>
      
      <guid>/post/docker/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      
        <description>Docker安装 使用官方安装脚本自动安装 安装命令如下：
curl -fsSL https://get.docker.com | bash -s docker --mirror aliyun也可以使用国内 daocloud 一键安装命令：</description>
      
    </item>
    
    <item>
      <title>docker从零部署项目包括不间断线上更新</title>
      <link>/post/docker/docker%E4%BB%8E%E9%9B%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%8C%85%E6%8B%AC%E4%B8%8D%E9%97%B4%E6%96%AD%E7%BA%BF%E4%B8%8A%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Mon, 13 Dec 2021 14:15:56 +0800</pubDate>
      
      <guid>/post/docker/docker%E4%BB%8E%E9%9B%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%8C%85%E6%8B%AC%E4%B8%8D%E9%97%B4%E6%96%AD%E7%BA%BF%E4%B8%8A%E6%9B%B4%E6%96%B0/</guid>
      
        <description>序 记录自己用Docker从零搭建项目部署到服务器和使用红黑部署来保证程序不中断更新的心得和经验。
 对Docker还不熟悉的小伙伴可以看下这篇文章
 1. 编写项目微服务 这是前提工作，必须确保项目是可以运行的。
2. 创建网络 这是容器通信的基础</description>
      
    </item>
    
  </channel>
</rss>